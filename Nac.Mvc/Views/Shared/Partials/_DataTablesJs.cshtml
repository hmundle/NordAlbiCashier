<!-- Partials/_DataTablesJs -->
@{
    if (ViewData["UseDatatables"] as bool? == true)
    {
        <script>
            var table;
            if (typeof rowOrder === 'undefined') {
                rowOrder = [0, 'asc'];
            }

            let config = {
                columnDefs: [], // will be set later
                buttons: [
                    {
                        extend: 'searchPanes',
                        config: {
                            layout: 'auto',
                            columns: [], // will be set later
                            viewCount: false,
                            controls: false,
                            collapse: false
                        }
                    },
                    {
                        extend: 'searchBuilder',
                        config: {
                            columns: [], // will be set later
                            depthLimit: 1,
                            conditions: {
                                date: {
                                    '!=': null,
                                    'null': null,
                                    '!null': null,
                                    '<': null,
                                    '<=': null,
                                    '>': null,
                                    '>=': null,
                                    '!between': null,
                                },
                                string: {
                                    '=': null,
                                    '!=': null,
                                    'null': null,
                                    '!null': null,
                                    'starts': null,
                                    '!starts': null,
                                    'ends': null,
                                    '!ends': null,
                                    '!contains': null,
                                },
                                num: {
                                    '!=': null,
                                    'null': null,
                                    '!null': null,
                                    '!between': null,
                                },
                            }
                        },
                    },
                    {
                        text: 'Suchfilter löschen',
                        action: function (e, dt, node, config) {
                            table.searchBuilder.rebuild(); //the search results will be cleared for searchBuilder.
                            table.searchPanes.clearSelections(); //the search results will be cleared for searchPanes.
                        }
                    }
                ],
                dom: 'Brplti',
                ajax: {
                    url: "@this.Url.Action("GetList")",
                    type: "POST",
                },
                order: [rowOrder],
                stateSave: true,
                processing: true,
                serverSide: true,
                filter: true,
                pageLength: 50,
                lengthMenu: [5, 10, 20, 50, 100, 500, 1000, 5000],
                columns: [] // will be set later
            };
            // dynamically add some datatables.net properties
            config.columns = columnsDefinition;
            if (typeof columnsSearchPanesEnabled !== 'undefined') {
                config.buttons[0].config.columns
                    // convert the objects to integer
                    = columnsSearchPanesEnabled.map(e => {
                        if (Number.isInteger(e)) {
                            return e;
                        }
                        else {
                            return e.id;
                        }
                    });
                columnsSearchPanesEnabled.forEach(e => {
                    let idx = 0;
                    let header = null;
                    if (Number.isInteger(e)) {
                        idx = e;
                    }
                    else {
                        idx = e.id;
                        // overwrite the header
                        header = e.header;
                    }

                    config.columnDefs.push(
                        {
                            searchPanes: {
                                show: true, // guarantee, that the pane is shown, there where some issues without
                                header: header
                            },
                            targets: [idx]
                        }
                    );
                });
            }
            if (typeof columnSearchBuilderDate !== 'undefined') {
                columnSearchBuilderDate.forEach(e => {
                    config.buttons[1].config.columns.push(e);
                    config.columnDefs.push(
                        {
                            type: "date",
                            searchBuilder: {
                                defaultCondition: "between"
                            },
                            targets: [e]
                        }
                    );
                });
            }
            if (typeof columnSearchBuilderNum !== 'undefined') {
                columnSearchBuilderNum.forEach(e => {
                    config.buttons[1].config.columns.push(e);
                    config.columnDefs.push(
                        {
                            type: "num",
                            searchBuilder: {
                                defaultCondition: "="
                            },
                            targets: [e]
                        }
                    );
                });
            }
            if (typeof columnSearchBuilderSearch !== 'undefined') {
                columnSearchBuilderSearch.forEach(e => {
                    config.buttons[1].config.columns.push(e);
                    config.columnDefs.push(
                        {
                            type: "string",
                            searchBuilder: {
                                defaultCondition: "contains"
                            },
                            targets: [e]
                        }
                    );
                });
            }
            if (typeof enableRowSelection !== 'undefined' && enableRowSelection == true) {
                config.select = {
                    style: 'os'
                };
                config.buttons.push({
                    extend: 'spacer',
                    style: 'empty'
                });
                config.buttons.push('selectAll');
                config.buttons.push('selectNone');
            }

            $(document).ready(function () {
                table = $('#myDataTable').DataTable(config);
                table.on('draw.dt', function () {
                    if (typeof onTableRender === 'function') {
                        onTableRender();
                    }
                });
            });

            GetSelectedIds = function () {
                return GetSelectedRows().map(d => d.id);
            }

            GetSelectedRows = function () {
                var rows = table.rows({ selected: true });
                return rows.data().toArray();
            }
        </script>
    }
}
