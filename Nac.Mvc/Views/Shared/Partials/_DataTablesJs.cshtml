<!-- Partials/_DataTablesJs -->
@{
    if (ViewData["UseDatatables"] as bool? == true)
    {
        <script>
            var table;
            const searchPanesButtonIdx = 0;
            const searchPanesButtonLabel = 'Typ Suche ';
            const searchBuilderButtonIdx = 1;
            const searchBuilderButtonLabel = 'Erweiterte Suche ';
            const slideDuration = 500;

            if (typeof rowOrder === 'undefined') {
                rowOrder = [0, 'asc'];
            }

            let config = {
                columnDefs: [], // will be set later
                buttons: [
                    {
                        text: searchPanesButtonLabel,
                        action: function (e, dt, node, config) {
                            table.searchBuilder.container().slideUp(slideDuration);
                            table.searchPanes.container().slideToggle(slideDuration);
                        }
                    },
                    {
                        text: searchBuilderButtonLabel,
                        action: function (e, dt, node, config) {
                            table.searchPanes.container().slideUp(slideDuration);
                            table.searchBuilder.container().slideToggle(slideDuration);
                        }
                    },
                    {
                        text: 'Suchfilter löschen',
                        action: function (e, dt, node, config) {
                            table.searchPanes.container().slideUp(slideDuration);
                            table.searchBuilder.container().slideUp(slideDuration);
                            table.searchPanes.clearSelections(); //the search results will be cleared for searchPanes.
                            table.searchBuilder.rebuild(); //the search results will be cleared for searchBuilder.
                        }
                    },
                    'spacer',
                    {
                        extend: 'collection',
                        text: 'Export',
                        buttons: [
                            'copy', 'excel', 'csv'
                        ]
                    }
                ],
                searchPanes: {
                    layout: 'auto',
                    columns: [], // will be set later
                    viewCount: false,
                    controls: false,
                    collapse: false
                },
                searchBuilder: {
                    liveSearch: true,
                    columns: [], // will be set later
                    depthLimit: 1,
                    conditions: {
                        date: {
                            '!=': null,
                            'null': null,
                            '!null': null,
                            '<': null,
                            '<=': null,
                            '>': null,
                            '>=': null,
                            '!between': null,
                        },
                        string: {
                            '=': null,
                            '!=': null,
                            'null': null,
                            '!null': null,
                            'starts': null,
                            '!starts': null,
                            'ends': null,
                            '!ends': null,
                            '!contains': null,
                        },
                        num: {
                            '!=': null,
                            'null': null,
                            '!null': null,
                            '!between': null,
                        },
                    }
                },
                dom: 'BPQrplti',
                ajax: {
                    url: "@this.Url.Action("GetList")",
                    type: "POST",
                },
                order: [rowOrder],
                stateSave: true,
                processing: true,
                serverSide: true,
                filter: true,
                pageLength: 50,
                lengthMenu: [5, 10, 20, 50, 100, 500, 1000, 5000],
                columns: [] // will be set later
            };
            // dynamically add some datatables.net properties
            config.columns = columnsDefinition;
            if (typeof columnsSearchPanesEnabled !== 'undefined') {
                config.searchPanes.columns
                    // convert the objects to integer
                    = columnsSearchPanesEnabled.map(e => {
                        if (Number.isInteger(e)) {
                            return e;
                        }
                        else {
                            return e.id;
                        }
                    });
                columnsSearchPanesEnabled.forEach(e => {
                    let idx = 0;
                    let header = null;
                    if (Number.isInteger(e)) {
                        idx = e;
                    }
                    else {
                        idx = e.id;
                        // overwrite the header
                        header = e.header;
                    }

                    config.columnDefs.push(
                        {
                            searchPanes: {
                                show: true, // guarantee, that the pane is shown, there where some issues without
                                header: header
                            },
                            targets: [idx]
                        }
                    );
                });
            }
            if (typeof columnSearchBuilderDate !== 'undefined') {
                columnSearchBuilderDate.forEach(e => {
                    config.searchBuilder.columns.push(e);
                    config.columnDefs.push(
                        {
                            type: "date",
                            searchBuilder: {
                                defaultCondition: "between"
                            },
                            targets: [e]
                        }
                    );
                });
            }
            if (typeof columnSearchBuilderNum !== 'undefined') {
                columnSearchBuilderNum.forEach(e => {
                    config.searchBuilder.columns.push(e);
                    config.columnDefs.push(
                        {
                            type: "num",
                            searchBuilder: {
                                defaultCondition: "="
                            },
                            targets: [e]
                        }
                    );
                });
            }
            if (typeof columnSearchBuilderSearch !== 'undefined') {
                columnSearchBuilderSearch.forEach(e => {
                    config.searchBuilder.columns.push(e);
                    config.columnDefs.push(
                        {
                            type: "string",
                            searchBuilder: {
                                defaultCondition: "contains"
                            },
                            targets: [e]
                        }
                    );
                });
            }
            if (typeof enableRowSelection !== 'undefined' && enableRowSelection == true) {
                config.select = {
                    style: 'os'
                };
                config.buttons.push({
                    extend: 'spacer',
                    style: 'empty'
                });
                config.buttons.push('selectAll');
                config.buttons.push('selectNone');
            }

            $(document).ready(function () {
                table = $('#myDataTable').DataTable(config);
                table.on('draw', function (e, s) {
                    if (typeof onTableRender === 'function') {
                        onTableRender();
                    }

                    const lenSearchPanes = $('.dtsp-searchPanes tr.selected').length;
                    table.buttons([searchPanesButtonIdx]).text(searchPanesButtonLabel + (lenSearchPanes === 0 ? '&nbsp;&nbsp;&nbsp;&nbsp;' : `(${lenSearchPanes})`));
                    const lenSearchBuilder = $('.dtsb-criteria').length;
                    table.buttons([searchBuilderButtonIdx]).text(searchBuilderButtonLabel + (lenSearchBuilder === 0 ? '&nbsp;&nbsp;&nbsp;&nbsp;' : `(${lenSearchBuilder})`));
                });
                table.searchPanes.container().hide();
                table.searchBuilder.container().hide();
            });

            GetSelectedIds = function () {
                return GetSelectedRows().map(d => d.id);
            }

            GetSelectedRows = function () {
                var rows = table.rows({ selected: true });
                return rows.data().toArray();
            }
        </script>
    }
}
