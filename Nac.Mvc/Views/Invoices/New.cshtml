@using Nac.Mvc.Utilities;
@model Invoice

@{
    var myObjectName = typeof(Invoice).Name;
    ViewData["Title"] = "New " + myObjectName;
    ViewData["UseDatatablesInsert"] = true;

    // prepare the payment type select list
    var paymentTypeSelectionList = new SelectList(ControllerHelper.PaymentTypeSelectionList().Items, PaymentType.Cash.ToString());
}
<h2>Rechnung erstellen</h2>

<div class="d-flex flex-row">
    <div class="p-2">
        <div class="input-group">
            <span class="input-group-text" id="newCodeLabel">Bar Code:</span>
            <input id="newCode" type="text" class="form-control" autofocus placeholder="Bar Code String" aria-label="Bar Code" aria-describedby="newCodeLabel">
        </div>
    </div>
    <div class="p-2">
        <button id="btnAdd" type="button" class="btn btn-primary">Eingabe Bar Code</button>
    </div>
    <div class="p-2">
        <span id="sum" class=" p-3 mx-3 text-bg-warning fw-bold lead">
            Summe: --
        </span>
    </div>
    <div class="p-2">
        <button id="btnPay" type="button" class="btn btn-primary">Bezahlen</button>
    </div>
    <div class="p-2">
        <button id="btnClear" type="button" class="btn btn-secondary">Alles löschen</button>
    </div>
</div>


<table id="myDataTable" class="table table-striped nowrap" style="width:100%">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Id)</th>
            <th>@Html.DisplayNameForInnerType((Selling s) => s.FinalPrice)</th>
            <th>@Html.DisplayNameForInnerType((Selling s) => s.Quantity)</th>
            <th>@Html.DisplayNameForInnerType((Selling s) => s.PriceManual)</th>
            <th>@Html.DisplayNameForInnerType((Selling s) => s.Weight)</th>
            <th>Grund-@Html.DisplayNameForInnerType((Product p) => p.Price)</th>
            <th>@Html.DisplayNameForInnerType((Product p) => p.Name)</th>
            <th>@Html.DisplayNameForInnerType((Product p) => p.BarCode)</th>
            <th>@Html.DisplayNameForInnerType((Product p) => p.Category)</th>
        </tr>
    </thead>
</table>

<div asp-validation-summary="All" class="text-danger"></div>

<!-- Modal -->
<div class="modal fade" id="finalizeDialog" tabindex="-1" aria-labelledby="finalizeDialogLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label asp-for="Type" class="col-form-label"></label>
                        <select asp-for="Type" class="form-control" asp-items="@paymentTypeSelectionList" size="@paymentTypeSelectionList.Count()"></select>
                    </div>
                    <div class="mb-3">
                        <label for="inptTotalPrice" class="col-form-label">Gesamtpreis:</label>
                        <input type="text" class="form-control bg-warning fs-2" id="inptTotalPrice" disabled value="">
                    </div>
                    <div class="mb-3">
                        <label for="inptCashValue" class="col-form-label">Bar-Betrag:</label>
                        <input type="text" class="form-control" id="inptCashValue">
                    </div>
                    <div class="mb-3">
                        <label for="inptReturn" class="col-form-label">Rückgeld:</label>
                        <input type="text" class="form-control bg-primary text-light fw-bold fs-2" id="inptReturn" disabled value="">
                    </div>
                    <div class="mb-3">
                        <label for="inptComment" class="col-form-label">Kommentar:</label>
                        <input type="text" class="form-control" id="inptComment">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                <button id="btnPaid" type="button" class="btn btn-primary" disabled>Bezahlt</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        const minQuantity = 0;
        const maxQuantity = 12;
        const minWeight = 0;
        const maxWeight = 2000;
        const minManualPrice = -50;
        const maxManualPrice = 200;
        const reFocusInterval = 2500;
        const regexInteger = new RegExp('^\\d+$');
        const regexFloat = new RegExp('^[+-]?\\d+,?\\d{0,2}$');
        const beepSound = new Audio("data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
        const finalizeModal = new bootstrap.Modal('#finalizeDialog', {});
        let finalizeModalIsOpen = false;
        let newCodeInputHasFocus = false;

        let table;
        let idCounter = 1;
        let sum = 0.0;
        let columnsDefinition = [
            {
                data: "rowIdx", name: "CRUD", orderable: false,
                render: function (data, type) {
                    if (type === 'display') {
                        return `<a class="px-1 text-danger" href="javascript:remove(${data})"><i class="lead fa-solid fa-trash"></i></a>`;
                    }
                    return data;
                }
            },
            {
                data: "finalPrice", name: "FinalPrice", orderable: false,
                render: DataTable.render.number(null, null, 2, '€')
            },
            { data: "quantity", name: "Quantity", orderable: false },
            {
                data: "priceManual", name: "PriceManual", orderable: false,
                render: DataTable.render.number(null, null, 2, '€')
            },
            { data: "weight", name: "Weight", orderable: false },
            {
                data: "price", name: "Price", orderable: false,
                render: DataTable.render.number(null, null, 2, '€')
            },
            { data: "name", name: "Name", orderable: false },
            { data: "barCode", name: "BarCode", orderable: false },
            { data: "category", name: "Category", orderable: false },
        ];

        $(document).ready(function () {
            table = $('#myDataTable').DataTable(
                {
                    info: false,
                    ordering: true,
                    paging: false,
                    searching: false,
                    order: [[0, 'desc']],
                    columns: columnsDefinition,
                    layout: {
                        bottomEnd: 'buttons',
                    }
                }
            );
            table.on('draw.dt', function () {
                newCodeInput.focus();
                showSum();
            });
            btnAdd = $("#btnAdd");
            newCodeInput = $("#newCode");
            sumField = $("#sum");
            payInptSum = $("#inptTotalPrice");
            payInptCash = $("#inptCashValue");
            payInptType = $("#Type");
            payInptComment = $("#inptComment");
            payInptReturn = $("#inptReturn");
            btnPaid = $("#btnPaid");
            finalizeDialog = $("#finalizeDialog");

            btnAdd.on("click", addNewRow);
            $("#btnPay").on("click", payment);
            $("#btnClear").on("click", clearAll);
            finalizeDialog.on("keypress", captureKeyPressCash);
            newCodeInput.on("keypress", captureKeyPressCode);
            btnPaid.on("click", finalize);
            payInptCash.on("input", calcReturn);

            newCodeInput.on("focus", function () {
                newCodeInputHasFocus = true;
            });
            newCodeInput.on("blur", function () {
                newCodeInputHasFocus = false;
            });

            finalizeDialog[0].addEventListener('shown.bs.modal', () => {
                payInptCash.focus();
                finalizeModalIsOpen = true;
                btnPaid.prop('disabled', false);
            })
            finalizeDialog[0].addEventListener('hidden.bs.modal', () => {
                newCodeInput.focus();
                finalizeModalIsOpen = false;
                btnPaid.prop('disabled', true);
            })

            const reFocusIntervalId = setInterval(reFocusCursor, reFocusInterval);
        });

        function captureKeyPressCode(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                btnAdd.click();
            }
            else {
                switch (event.code) {
                    case 'NumpadSubtract':
                    case 'NumpadAdd':
                        event.preventDefault();
                        payment();
                        break;
                    case 'NumpadMultiply':
                        event.preventDefault();
                        clearAll();
                        break;
                }
            }
        }

        function captureKeyPressCash(event) {
            if (event.code === 'NumpadEnter') {
                event.preventDefault();
                btnPaid.click();
            }
        }

        function addNewRow() {
            // get product
            $.get(
                `@this.Url.Action(nameof(ProductsController.GetDetailsDataAsync).RemoveAsyncPostfix(), nameof(ProductsController).RemoveController())/${newCodeInput.val()}`,
                null, null,
                'json'
            ).done(newProductReceived)
                .fail(newProductFailed);
        }

        async function newProductReceived(result) {
            // the result is currently a Product object and is going to be a Selling object,
            // therefore add the missing properties
            result.productId = result.id;
            // overwrite the Id, it has to be generated from DB for Selling object
            result.id = '00000000-0000-0000-0000-000000000000';
            // invoiceId will be overwritten on backend side
            result.quantity = 1;
            result.priceManual = 0.0;
            result.weight = 0;
            switch (result.category) {
                case 'Code':
                    result.finalPrice = result.price;
                    break;
                case 'Quantity':
                    await beep();
                    result.quantity = await doQuantity(result);
                    result.finalPrice = result.quantity * result.price;
                    break;
                case 'Price':
                    await beep();
                    result.priceManual = await doPrice(result);
                    result.finalPrice = result.priceManual;
                    break;
                case 'Weight':
                    await beep();
                    result.weight = await doWeight(result);
                    result.finalPrice = result.weight / 1000.0 * result.price;
                    break;
                default:
                    alert(`Keine gültige Kategorie für das Product '${result.name}'`);
                    break;
            }
            result.rowIdx = idCounter;
            table.row.add(
                result
            ).draw(false);
            idCounter++;

            // show sum implicit after redrawing table

            // Clear the TextBoxes.
            newCodeInput.val('');
        }


        async function newProductFailed(r) {
            await beep();
            alert('Produkt nicht gefunden!');
        }

        async function doQuantity(result) {
            let multiplier = 1;
            do {
                do {
                    let val = prompt(`Wieviele '${result.name}'?`);
                    if (val === null) {
                        multiplier = 0;
                    }
                    else {
                        if (!regexInteger.test(val)) {
                            await beep();
                            alert(`'${val}' ist keine ganze Zahl!`);
                            val = null;
                        }
                        multiplier = parseInt(val);
                    }
                }
                while (isNaN(multiplier));
            }
            while (!plausiQuantity(multiplier));
            return multiplier;
        }
        function plausiQuantity(multiplier) {
            if (minQuantity <= multiplier && multiplier <= maxQuantity) {
                return true;
            }
            alert(`Anzahl '${multiplier}' ist nicht plausibel!\nZum Abbrechen '0' eintragen und dann aus der Liste löschen.`)
            return false;
        }
        async function doWeight(result) {
            let weight = 0;
            do {
                do {
                    let val = prompt(`'${result.name}' wiegt in GRAMM?`);
                    if (val === null) {
                        weight = 0;
                    }
                    else {
                        if (!regexInteger.test(val)) {
                            await beep();
                            alert(`'${val}' ist keine ganze Zahl, Preisabgabe in GRAMM!`);
                            val = null;
                        }
                        weight = parseInt(val);
                    }
                }
                while (isNaN(weight));
            }
            while (!plausiWeight(weight));
            return weight;
        }
        function plausiWeight(weight) {
            if (minWeight <= weight && weight <= maxWeight) {
                return true;
            }
            alert(`Gewicht '${weight}'GRAMM ist nicht plausibel!\nFür hohes Gewicht, mehrere Einträge machen.\nZum Abbrechen '0' eintragen und dann aus der Liste löschen.`)
            return false;
        }
        async function doPrice(result) {
            let price = 0.0;
            do {
                do {
                    let val = prompt(`'${result.name}' kostet?`);
                    if (val === null) {
                        price = 0;
                    }
                    else {
                        if (!regexFloat.test(val)) {
                            await beep();
                            alert(`'${val}' ist keine Zahl!`);
                            price = NaN;
                        }
                        else {
                            val = val.replace(',', '.');
                            price = parseFloat(val);
                        }
                    }
                }
                while (isNaN(price));
            }
            while (!plausiPrice(price));
            return price;
        }
        function plausiPrice(price) {
            if (minManualPrice <= price && price <= maxManualPrice) {
                return true;
            }
            alert(`Betrag '${price}' ist nicht plausibel!\nZum Abbrechen '0' eintragen und dann aus der Liste löschen.`)
            return false;
        }

        function sumUpAllPrices() {
            const initialValue = 0;
            return table.data().reduce(
                (accumulator, currentValue) => accumulator + currentValue.finalPrice,
                initialValue
            );
        }

        function showSum() {
            sum = sumUpAllPrices();
            const sumString = sum.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
            sumField.html(`Summe: ${sumString}`);
            payInptSum.val(sumString);
        }

        function remove(rowIdx) {
            var rows = table
                .rows(function (idx, data, node) {
                    return data.rowIdx === rowIdx ?
                        true : false;
                });
            if (rows.length < 1) {
                alert('Nicht zum Löschen gefunden!');
                return;
            }
            if (!confirm(`Löschen von Kauf '${rows.data()[0].name}'? Kann nicht rückgängig gemacht werden!'`)) {
                return;
            }
            rows.remove().draw();
        }

        function payment() {
            if (table.data().count() <= 0) {
                alert('Noch keine Einkäufe vorhanden!');
                return;
            }
            // open modal dialog
            finalizeModal.show();
        }

        function calcReturn() {
            //let sum = payInptSum.val();
            //sum = sum.replace(',', '.');
            //const sumNum = parseFloat(sum);
            let cash = payInptCash.val();
            cash = cash.replace(',', '.');
            const cashNum = parseFloat(cash);
            payInptReturn.val((cashNum - sum).toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }));
        }

        async function finalize() {
            // disable button to avoid multiple execution
            btnPaid.prop('disabled', true);

            if (!await finalizeValidation()) {
                btnPaid.prop('disabled', false);
                return;
            }

            const postObject = {
                invoice: {
                    type: payInptType.val(),
                    comment: payInptComment.val()
                },
                sellings: table.data().toArray()
            };
            //Send the JSON array to Controller using AJAX.
            $.ajax({
                type: "POST",
                url: `@this.Url.Action(nameof(InvoicesController.AddSellingsAsync).RemoveAsyncPostfix())`,
                data: JSON.stringify(postObject),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    //alert(r + " record(s) inserted.");
                    window.location.href = '@this.Url.Action(nameof(InvoicesController.NewAsync).RemoveAsyncPostfix())';
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(`Error - ${xhr.status}: ${xhr.statusText}`);
                    alert(thrownError);
                    btnPaid.prop('disabled', false);
                }
            });
        }

        async function finalizeValidation() {
            // validate input
            let cash = payInptCash.val();
            cash = '0' + cash;
            if (!regexFloat.test(cash)) {
                await beep();
                alert(`Der Bar-Betrag Wert '${cash}' ist keine Zahl!`);
                return false;
            }
            cash = cash.replace(',', '.');
            const cashNum = parseFloat(cash);
            if (isNaN(cashNum) || cashNum > 300) {
                await beep();
                alert('Bar-Betrag Wert ist nicht plausibel! Versuche es nochmals.');
                return false;
            }
            return true;
        }

        function clearAll() {
            if (confirm(`Sollen alle Einkäufe aus dieser Tabelle entfernt werden?\nDas kann nicht rückgängig gemacht werden?`)) {
                table.clear().draw();
                sumField.html(`Summe: --`);
            }
        }

        async function beep() {
            await beepSound.play();
        }

        function reFocusCursor() {
            if (newCodeInputHasFocus) {
                console.log("already focused!");
                return;
            }
            if (finalizeModalIsOpen) {
                console.log("finalize is open!");
                return;
            }
            console.log("re focus!");
            newCodeInput.focus();
        }

    </script>
}
