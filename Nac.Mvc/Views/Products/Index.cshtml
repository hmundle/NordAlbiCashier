@model IEnumerable<Product>
@{
    var myObjectName = typeof(Product).Name;
    ViewData["Title"] = "Index " + myObjectName;
    ViewData["UseDatatables"] = true;
}

<h3>
    <span class="pe-2">Produkte</span> 
    <item-create></item-create>
</h3>

<table id="myDataTable" class="table table-striped nowrap" style="width:100%">
    <thead>
        <tr>
            <th>&nbsp;</th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BarCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PriceReduced)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Group)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsActive)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Created)
            </th>
        </tr>
    </thead>
</table>

@section Scripts{
    <script>
        const rowOrder = [7, 'desc'];
        const columnSearchBuilderSearch = [1, 2];
        const columnSearchBuilderDate = [7];
        //const columnSearchBuilderNum = [9, 10];
        const columnsSearchPanesEnabled = [
            3, 6, 
        @*{ id: 3, header: '@Html.DisplayNameForInnerType((L0QualityControl q) => q.QC01_L0Browse)' },
        //{ id: 4, header: '@Html.DisplayNameForInnerType((L0QualityControl q) => q.QC02_L0SipMeta)' },
        *@];
        //const enableRowSelection = true;
        const columnsDefinition = [
            {
                data: "id", name: "CRUD", orderable: false,
                render: function (data, type) {
                    if (type === 'display') {
                        return AddCrudButtons(data, [
                            { uriBase: '@this.Url.Action("Details")', icon: 'info-circle' },
                            { uriBase: '@this.Url.Action("Edit")', icon: 'edit' },
                        ]);
                    }
                    return data;
                }
            },
            { data: "name", name: "Name" },
            { data: "barCode", name: "BarCode", orderable: true },
            { data: "category", name: "Category", orderable: true },
            {
                data: "price", name: "Price", orderable: true,
                render: DataTable.render.number(null, null, 2, '€')
            },
            {
                data: "priceReduced", name: "PriceReduced", orderable: true,
                render: DataTable.render.number(null, null, 2, '€')
            },
            { data: "group", name: "Group", orderable: true },
            { data: "isActive", name: "IsActive", orderable: false },
            { data: "created", name: "Created", orderable: true },
        ];
    </script>
}
